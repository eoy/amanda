.hide-for-ie {
  .ie & {
    display: none !important;
  }
}

//---------------------------------------------------------------
//  IE7/8 - Zurb Foundation 5 Grid
//ˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍˍ
//
//  1) Make sure $row-width-px = your max large breakpoint row width (e.g. 960px)
//  2) Make sure $small-screen-px = your minimum large breakpoint row width (e.g. 768px)
//  3) Make sure values are in px and not in rem

/* The Grid ---------------------- */
$container-ie: 940px;
$row-width-ie: 1120px;
$column-gutter-px: 30px;
$half-gutter-px: $column-gutter-px / 2;

.ie8 {
  .container {
    width: $container-ie;
  }
  .full-width-row {
    max-width: $row-width-ie;
    width: $row-width-ie;
  }
  .row {
    width: $row-width-ie;
    &.full-width {
      max-width: $row-width-ie;
      width: $row-width-ie;
    }
  }
  .row, .container {
    margin: 0 auto;
    max-width: 100%;
    min-width: $large-screen;
    @include clearfix();
    .row {
      width: auto;
      max-width: none;
      min-width: 0;
      margin: 0 -$half-gutter-px;
      .large-collapse {
        margin: 0;
      }
    }
    .large-collapse {
      .column, .columns {
        padding: 0;
      }
    }
    &.collapse {
      margin: 0;
    }
  }
  .column, .columns {
    float: left;
    min-height: 1px;
    padding: 0 $half-gutter-px;
    position: relative;
    &.collapse {
      padding-left: 0;
      padding-right: 0;
    }
    .large-centered {
      float: none;
      margin: 0 auto;
    }
  }

  [class*="column"] + [class*="column"]:last-child {
    float: right;
  }
  [class*="column"] + [class*="column"].end {
    float: left;
  }

  .show-for-small-only, .hide-for-large-up {
    display: none !important;
  }

  .hide-for-small, .show-for-large-up {
    display: block !important;
  }

  //loop for grid

  $i: 1;
  @while $i < $total-columns + 1 {

    .medium-#{$i},
    .row .medium-#{$i}
    .container .medium-#{$i} {
      width: ($i/$total-columns)*100%;
    }

    .large-#{$i},
    .row .large-#{$i},
    .container .large-#{$i} {
      width: ($i/$total-columns)*100%;
    }

    .row .large-offset-#{$i},
    .container .large-offset-#{$i} {
      margin-left: ($i/$total-columns)*100%;
    }
    .row .medium-offset-#{$i},
    .container .medium-offset-#{$i} {
      margin-left: ($i/$total-columns)*100%;
    }
    $i: $i + 1;
  }

  //loop for pull and push

  $j: 2;
  @while $j < $total-columns + 1 {
    .pull-#{$j} {
      right: ($j/$total-columns)*100%;
    }
    .push-#{$j} {
      left: ($j/$total-columns)*100%;
    }
    $j: $j + 1;
  }

  //loop for block-grid

  $k: 2;
  @while $k < $total-columns + 1 {
    .medium-block-grid-#{$k},
    .large-block-grid-#{$k} {
      margin-left:0;
      margin-right:0;
      list-style: none;
    }
    .medium-block-grid-#{$k} > li,
    .large-block-grid-#{$k} > li {
      width: (100/$k)*1%;
      float: left;
      padding: auto $half-gutter-px auto $half-gutter-px;
      &.collapse {
        padding-left: 0px;
        padding-right: 0px;
      }
    }

    $last: '';
    @for $i from 2 through $k {
        $last: $last + '+ ' + li;
    }

    $next: '';
    @for $i from 2 through $k + 1 {
        $next: $next + '+ ' + li;
    }

    .medium-block-grid-#{$k} > li:first-child #{$last},
    .large-block-grid-#{$k} > li:first-child #{$last} {
      float: right
    }

    .medium-block-grid-#{$k} > li:first-child #{$next},
    .large-block-grid-#{$k} > li:first-child #{$next} {
      clear: both
    }
    $k: $k + 1;
  }
}
